@page "/"
@inject NavigationManager  navManager
@using ScrapeRSS.Models

<h1>Link Builder</h1>

<p class="alert alert-info">
    This is where you can build the links used to generate RSS feeds by scraping public websites that don't provide their own.
</p>

<label for="url">URL of the website to scrape <small>(required)</small></label>
<input type="text" id="url" class="input-max" name="url" @bind="url" placeholder="http://" required />

<label for="matchIdOrClass">Only consider adding items whose id or class contains this value</label>
<input type="text" id="matchIdOrClass" class="input-large" name="matchIdOrClass" @bind="matchIdOrClass" placeholder="e.g. item-title" />

<label for="matchItemUrl">Only add items if their URL contains this value</label>
<input type="text" id="matchItemUrl" class="input-large" name="matchItemUrl" @bind="matchItemUrl" placeholder="/article/" />

<br />
<br />
<BSButton Color="Color.Secondary" OnClick="ToggleAdvancedSettings">Advanced Settings</BSButton>
<br />
<BSCollapse IsOpen="advancedSettingsVisible">
    <label for="title">Specify the title of the generated feed. Omit to use the title of the scraped website.</label>
    <input type="text" id="title" class="input-large" name="title" @bind="title" placeholder="use website title" />

    <label for="author">Specify the author of the generated feed. Omit to use the title of the scraped website.</label>
    <input type="text" id="author" class="input-large" name="author" @bind="author" placeholder="exclude" />

    <label for="maxResults">The maximum number of items to return in the generated feed. (Between 1-100)</label>
    <input type="number" id="maxResults" class="input-small" name="maxResults" @bind="maxResults" min="1" max="100" step="1" />

    <label for="itemSelector">Use this XPath selector to get the item element. <strong>Cannot be used at the same time as the 'Id/Class Filter'</strong></label>
    <input type="text" id="itemSelector" class="input-large" name="itemSelector" @bind="itemSelector" placeholder="no selector" />

    <label for="itemTitleSelector">Use this XPath selector to get the item title. Omit to use the text of the first matched &lt;a&gt; element.</label>
    <input type="text" id="itemTitleSelector" class="input-large" name="itemTitleSelector" @bind="itemTitleSelector" placeholder="use link text" />

    <label for="itemUrlSelector">Use this XPath selector to get the item URL. Omit to use the URL of the first matched &lt;a&gt; element.</label>
    <input type="text" id="itemUrlSelector" class="input-large" name="itemUrlSelector" @bind="itemUrlSelector" placeholder="use first URL" />

    <label for="itemDescriptionSelector">Use this XPath selector to get the item description. Omit to add no description to the generated feed.</label>
    <input type="text" id="itemDescriptionSelector" class="input-large" name="itemDescriptionSelector" @bind="itemDescriptionSelector" placeholder="exclude" />

    <label for="itemAuthorSelector">Use this XPath selector to get the item author. Omit to add no author to the generated feed.</label>
    <input type="text" id="itemAuthorSelector" class="input-large" name="itemAuthorSelector" @bind="itemAuthorSelector" placeholder="exclude" />

    <label for="itemDateSelector">Use this XPath selector to get the item publish date. Omit to add no date to the generated feed.</label>
    <input type="text" id="itemDateSelector" class="input-large" name="itemDateSelector" @bind="itemDateSelector" placeholder="exclude" />
</BSCollapse>

<br />
<button type="button" class="btn btn-primary" @onclick="GenerateLink">Generate Link</button>
<br />
<br />

<BSCollapse IsOpen="validationErrorVisible">
    <p class="alert alert-warning">
        @validationError
    </p>
</BSCollapse>

@code {
    string url;

    string matchIdOrClass;
    string matchItemUrl;

    string title;
    string author;
    int maxResults = 10;

    string itemSelector;
    string itemTitleSelector;
    string itemUrlSelector;
    string itemDescriptionSelector;
    string itemAuthorSelector;
    string itemDateSelector;

    bool advancedSettingsVisible = false;

    string validationError;
    bool validationErrorVisible = false;

    private bool AreFieldsValid()
    {
        // Generate settings model and use its validation logic
        var settings = new FeedGeneratorSettings()
        {
            Author = author,
            ItemAuthorSelector = itemAuthorSelector,
            ItemDateSelector = itemDateSelector,
            ItemDescriptionSelector = itemDescriptionSelector,
            ItemSelector = itemSelector,
            ItemTitleSelector = itemTitleSelector,
            ItemUrlSelector = itemUrlSelector,
            MatchIdOrClass = matchIdOrClass,
            MatchItemUrl = matchItemUrl,
            MaxResults = maxResults,
            Title = title,
            Url = url
        };

        var valid = settings.Validate();
        validationError = settings.ValidationError;
        validationErrorVisible = !string.IsNullOrWhiteSpace(validationError);
        StateHasChanged();

        return valid;
    }

    private void GenerateLink()
    {
        if (!AreFieldsValid())
        {
            return;
        }

        var parameters = new Dictionary<string, string>();
        parameters.Add("url", url);
        parameters.Add("maxResults", maxResults.ToString());

        if (!string.IsNullOrWhiteSpace(matchIdOrClass))
        {
            parameters.Add("matchIdOrClass", matchIdOrClass);
        }

        if (!string.IsNullOrWhiteSpace(matchItemUrl))
        {
            parameters.Add("matchItemUrl", matchItemUrl);
        }

        if (!string.IsNullOrWhiteSpace(title))
        {
            parameters.Add("title", title);
        }

        if (!string.IsNullOrWhiteSpace(author))
        {
            parameters.Add("author", author);
        }

        if (!string.IsNullOrWhiteSpace(itemSelector))
        {
            parameters.Add("itemSelector", itemSelector);
        }

        if (!string.IsNullOrWhiteSpace(itemTitleSelector))
        {
            parameters.Add("itemTitleSelector", itemTitleSelector);
        }

        if (!string.IsNullOrWhiteSpace(itemUrlSelector))
        {
            parameters.Add("itemUrlSelector", itemUrlSelector);
        }

        if (!string.IsNullOrWhiteSpace(itemDescriptionSelector))
        {
            parameters.Add("itemDescriptionSelector", itemDescriptionSelector);
        }

        if (!string.IsNullOrWhiteSpace(itemAuthorSelector))
        {
            parameters.Add("itemAuthorSelector", itemAuthorSelector);
        }

        if (!string.IsNullOrWhiteSpace(itemDateSelector))
        {
            parameters.Add("itemDateSelector", itemDateSelector);
        }

        var rssLink = QueryHelpers.AddQueryString(navManager.ToAbsoluteUri("api/generate-feed").ToString(), parameters);
        var previewLink = navManager.ToAbsoluteUri($"preview/{Uri.EscapeDataString(rssLink)}").ToString();
        navManager.NavigateTo(previewLink);
    }

    private void ToggleAdvancedSettings()
    {
        advancedSettingsVisible = !advancedSettingsVisible;
        StateHasChanged();
    }
}